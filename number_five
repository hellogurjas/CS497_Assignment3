/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    TreeNode constructBalancedBST(List<Integer> values, int start, int end) {
        if (start > end) {

            return null;
        }
        
        int mid = (start + end) / 2;
        TreeNode root = new TreeNode(values.get(mid));
        
        root.left = constructBalancedBST(values, start, mid - 1);
        root.right = constructBalancedBST(values, mid + 1, end);
        
        return root;
    }
    public TreeNode balanceBST(TreeNode root) {

        List<Integer> values = new ArrayList<>();
        inOrderTraversal(root, values);
        
        // Step 2: Build a balanced BST from the sorted values
        return constructBalancedBST(values, 0, values.size() - 1);
    }

        


    }
}
